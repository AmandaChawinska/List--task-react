{"version":3,"sources":["GlobalStyle.js","features/tasks/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Tasks.js","App.js","serviceWorker.js","theme.js","store.js","index.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","gallery","StyledForm","styled","form","breakpoint","mobileMax","Input","input","alto","Button","button","teal","white","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","action","index","findIndex","task","id","done","setAllDone","map","removeTask","filter","removeAllTasks","actions","selectTasks","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","current","focus","ref","value","placeholder","onChange","target","List","ul","Item","li","hidden","css","Content","span","toggleDone","forestGreen","remove","crimson","TaskList","useSelector","key","onClick","Wrapper","div","silver","Buttons","length","disabled","every","removeAll","section","Header","header","Title","h2","Body","Section","title","body","extraHeaderContent","Container","children","Tasks","Boolean","window","location","hostname","match","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","black","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9e1f97b1.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle `\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        font-family: 'Montserrat', sans-serif;\r\n        background: ${({ theme }) => theme.color.gallery};\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form `\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n\r\n`;\r\n\r\nexport const Input = styled.input `\r\n    padding: 10px;\r\n    border: 1px solid ${({ theme }) => theme.color.alto};\r\n`;\r\n\r\nexport const Button = styled.button `\r\n    padding: 10px;\r\n    background: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: (state, action) => {\r\n            const index = state.tasks.findIndex(task => task.id === action.payload);\r\n            state.tasks[index].done = !state.tasks[index].done;\r\n        },\r\n        setAllDone: state => {\r\n            state.tasks = state.tasks.map(task => ({ ...task, done: true }))\r\n        },\r\n        removeTask: (state, action) => {\r\n            state.tasks = state.tasks.filter(task => task.id !== action.payload)\r\n        },\r\n        removeAllTasks: (state) => {\r\n            state.tasks = [];\r\n        },\r\n    },\r\n});\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    setAllDone,\r\n    removeTask,\r\n    removeAllTasks,\r\n} = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { Button, Input, StyledForm } from \"./styled\";\r\nimport { addTask } from \"../tasksSlice\";\r\n\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n    if (!trimmedNewTaskContent ) {\r\n      return;\r\n    }\r\n\r\n    dispatch(addTask({\r\n      content: trimmedNewTaskContent,\r\n      done: false,\r\n      id: nanoid(),\r\n    }));\r\n    \r\n    setNewTaskContent(\"\");\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input\r\n        ref={inputRef}\r\n        value={newTaskContent}\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n      />\r\n      <Button>Dodaj zadanie</Button>\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul `\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li `\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alto};\r\n\r\n    ${({ hidden }) => hidden && css `\r\n        display:none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span `\r\n    ${({ done }) => done && css `\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button `\r\n    border: none;\r\n    color: ${({ theme }) => theme.color.white};\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n    transition: filter 0.3s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css `\r\n        background: ${({ theme }) => theme.color.forestGreen};\r\n    `}\r\n\r\n    ${({ remove }) => remove && css `\r\n        background: ${({ theme }) => theme.color.crimson};\r\n    `}\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import React from \"react\";\r\nimport {useSelector, useDispatch } from \"react-redux\";\r\nimport { List, Item, Content, Button } from \"./styled\";\r\nimport { selectTasks, toggleTaskDone, removeTask} from \"../tasksSlice\";\r\n\r\n\r\nconst TaskList = () => {\r\n    const {tasks, hideDone} = useSelector(selectTasks);\r\n    const dispatch = useDispatch(); \r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}   \r\n                >\r\n                    <Button \r\n                        toggleDone\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"√\" : \"\"}\r\n                    </Button>\r\n                    <Content done={task.done}>\r\n                        {task.content}\r\n                    </Content>\r\n                    \r\n                    <Button \r\n                    remove\r\n                    onClick={() => dispatch(removeTask(task.id))}\r\n                    >\r\n                        🗑\r\n            </Button>\r\n                </Item>\r\n            ))}\r\n        </List >\r\n    );\r\n    \r\n};\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background: transparent;\r\n    color: ${({ theme }) => theme.color.teal};\r\n    border: none;\r\n    margin: 0 0 0 20px;\r\n    transition: filter 0.3s;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.silver};\r\n    }\r\n\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Wrapper, Button } from \"./styled\";\r\nimport { selectTasks, toggleHideDone, setAllDone, removeAllTasks } from \"../tasksSlice\";\r\n\r\n\r\nconst Buttons = () => {\r\n    const { tasks, hideDone } =useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\nreturn (\r\n    <Wrapper>\r\n        {tasks.length > 0 && (\r\n            <>\r\n\r\n                <Button onClick={() => dispatch(toggleHideDone())} >\r\n                    {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n            </Button>\r\n                <Button\r\n                    onClick={() => dispatch(setAllDone())}\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                >\r\n                    Ukończ wszystkie\r\n            </Button>\r\n            <Button\r\n                onClick={() => dispatch(removeAllTasks())}\r\n                removeAll>\r\n                    Usuń wszystko\r\n\r\n            </Button>\r\n            </>\r\n        )}\r\n    </Wrapper>\r\n);\r\n        };\r\n\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section `\r\n    margin: 10px 0;\r\n    background: ${({ theme }) => theme.color.white};\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.color.alto};\r\n`;\r\n\r\nexport const Header = styled.header `\r\n     border-bottom: 1px solid ${({ theme }) => theme.color.alto};\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2 `\r\n    font-size: 20px;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Body = styled.div `\r\n    padding: 20px;\r\n`;","import React from \"react\";\r\nimport { Wrapper, Body, Header, Title } from \"./styled\";\r\n\r\nconst Section = ({title, body, extraHeaderContent}) => (\r\n    <Wrapper>\r\n        <Header>\r\n            <Title>{title}</Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n\r\n        <Body>\r\n           {body}\r\n\r\n        </Body>\r\n\r\n    </Wrapper>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n    <header>\r\n    <h1>{title}</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n\r\n`;","import React from \"react\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\n\r\nconst Container = ({children}) => (\r\n    <Wrapper>\r\n        {children}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Container;","import React from 'react';\nimport { useSelector } from \"react-redux\";\nimport Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\nimport Container from \"../../common/Container\";\nimport { selectTasks } from './tasksSlice';\n\n\n\nfunction Tasks() {\n  const { tasks } = useSelector(selectTasks);\n\n\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n      />\n\n      <Section\n        title=\"Lista zadań\"\n        body={\n          <TaskList/>\n        }\n        \n        extraHeaderContent={\n          <Buttons/>\n        }\n      />\n\n    </Container>\n  )\n};\n\nexport default Tasks;\n","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nexport default () => <Tasks />;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const theme = {\r\n    color: {\r\n        black: \"#000\",\r\n        silver: \"#ccc\",\r\n        alto: \"#ddd\",\r\n        gallery: \"#eee\",\r\n        white: \"#fff\",\r\n        teal: \"#008080\",\r\n        crimson: \"#db143c\",\r\n        forestGreen: \"#228c22\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n};","import { configureStore } from '@reduxjs/toolkit';\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}