{"version":3,"sources":["GlobalStyle.js","features/tasks/TasksPage/Form/styled.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TaskList/styled.js","routes.js","features/tasks/TasksPage/queryParameters.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Button/index.js","features/tasks/TasksPage/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","features/author/AuthorPage.js","Navigation/styled.js","Navigation/index.js","App.js","serviceWorker.js","theme.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","gallery","StyledForm","styled","form","breakpoint","mobileMax","Button","button","teal","white","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","setAllDone","removeTask","splice","removeAllTasks","fetchExampleTasks","loading","fetchExampleTasksSuccess","fetchExampleTasksError","setTasks","actions","selectTasksState","selectTasks","selectHideDone","input","alto","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","current","focus","Input","ref","value","placeholder","onChange","target","List","ul","Item","li","hidden","css","Content","span","toggleDone","forestGreen","remove","crimson","toTask","useQueryParameter","key","location","useLocation","URLSearchParams","search","get","TaskList","query","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","onClick","to","Wrapper","div","silver","Buttons","length","disabled","every","removeAll","section","Header","header","Title","h2","Body","Section","title","body","extraHeaderContent","Container","children","replaceQueryParameter","history","useHistory","searchParams","undefined","delete","set","newSearch","toString","pathname","useReplaceQueryParameter","TasksPage","Search","TaskPage","useParams","find","getTaskById","StyledNavLink","NavLink","attrs","activeClassName","Navigation","path","Boolean","window","hostname","match","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","console","log","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","black","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2fAEO,IAAMA,EAAcC,YAAH,KAWF,qBAAGC,MAAkBC,MAAMC,W,wkBCX1C,IAAMC,EAAaC,IAAOC,KAAV,KAKC,qBAAGL,MAAkBM,WAAWC,aAQ3CC,EAASJ,IAAOK,OAAV,KAED,qBAAGT,MAAkBC,MAAMS,QAChC,qBAAGV,MAAkBC,MAAMU,S,QChB3BC,EAA0B,SAAAC,GAAK,OACxCC,aAAaC,QAHO,QAGkBC,KAAKC,UAAUJ,KCAnDK,EAAaC,YAAY,CAC3BC,KAAM,QACNC,aAAc,CACVR,MDAJG,KAAKM,MAAMR,aAAaS,QANJ,WAMiC,GCCjDC,UAAU,GAEdC,SAAU,CACNC,QAAS,cAAmC,IAAhCb,EAA+B,EAA/BA,MAAoBc,EAAW,EAApBC,QACnBf,EAAMgB,KAAKF,IAEfG,eAAgB,SAAAC,GACZA,EAAMP,UAAYO,EAAMP,UAE5BQ,eAAgB,cAAqC,IAAlCnB,EAAiC,EAAjCA,MAAoBoB,EAAa,EAAtBL,QACpBM,EAAQrB,EAAMsB,WAAU,qBAAGC,KAAgBH,KACjDpB,EAAMqB,GAAOG,MAAQxB,EAAMqB,GAAOG,MAEtCC,WAAY,YAAgB,IAAD,EAAZzB,EAAY,EAAZA,MAAY,cACJA,GADI,IACvB,2BAA0B,SACjBwB,MAAO,GAFO,gCAK3BE,WAAY,cAAqC,IAAlC1B,EAAiC,EAAjCA,MAAoBoB,EAAa,EAAtBL,QAChBM,EAAQrB,EAAMsB,WAAU,qBAAGC,KAAgBH,KACjDpB,EAAM2B,OAAON,EAAO,IAExBO,eAAgB,SAACV,GACbA,EAAMlB,MAAQ,IAElB6B,kBAAmB,SAAAX,GACfA,EAAMY,SAAU,GAGpBC,yBAA0B,SAACb,EAAD,GAA+B,IAAZlB,EAAW,EAApBe,QAChCG,EAAMlB,MAAQA,EACdkB,EAAMY,SAAU,GAGpBE,uBAAwB,SAACd,GACrBA,EAAMY,SAAU,GAGpBG,SAAU,SAACf,EAAD,GAAgC,IAAblB,EAAY,EAArBe,QAChBG,EAAMlB,MAAQA,M,EAiBtBK,EAAW6B,QAVXrB,E,EAAAA,QACAI,E,EAAAA,eACAE,E,EAAAA,eACAM,E,EAAAA,WACAC,E,EAAAA,WACAE,E,EAAAA,eACAC,E,EAAAA,kBAEAE,G,EADAE,S,EACAF,0BACAC,E,EAAAA,uBAIGG,EAAmB,SAAAjB,GAAK,OAAIA,EAAMlB,OAE5BoC,EAAc,SAAAlB,GAAK,OAAIiB,EAAiBjB,GAAOlB,OAC/CqC,EAAiB,SAAAnB,GAAK,OAAIiB,EAAiBjB,GAAOP,UAehDN,IAAf,Q,uHClFed,UAAO+C,MAAtB,KAEwB,qBAAGnD,MAAkBC,MAAMmD,QC2CpCC,EAvCF,WAAO,IAAD,EAC2BC,mBAAS,IADpC,mBACVC,EADU,KACMC,EADN,KAEXC,EAAWC,iBAAO,MAElBC,EAAWC,cAqBjB,OACE,kBAACzD,EAAD,CAAY0D,SApBO,SAACC,GACpBA,EAAMC,iBAEN,IAAMC,EAAwBT,EAAeU,OAExCD,IAILL,EAASjC,EAAQ,CACfwC,QAASF,EACT3B,MAAM,EACND,GAAI+B,iBAGNX,EAAkB,IAClBC,EAASW,QAAQC,WAKf,kBAACC,EAAD,CACEC,IAAKd,EACLe,MAAOjB,EACPkB,YAAY,wBACZC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBnB,EAAkBmB,EAAOH,UAErD,kBAAChE,EAAD,wB,irCCvCC,IAAMoE,EAAOxE,IAAOyE,GAAV,KAMJC,EAAO1E,IAAO2E,GAAV,KAMc,qBAAG/E,MAAkBC,MAAMmD,QAEpD,qBAAG4B,QAAuBC,YAAJ,QAKfC,EAAU9E,IAAO+E,KAAV,KACd,qBAAG9C,MAAmB4C,YAAJ,QAKXzE,EAASJ,IAAOK,OAAV,KAEN,qBAAGT,MAAkBC,MAAMU,SAMlC,qBAAGyE,YAA+BH,YAAJ,KACd,qBAAGjF,MAAkBC,MAAMoF,kBAG3C,qBAAGC,QAAuBL,YAAJ,KACN,qBAAGjF,MAAkBC,MAAMsF,cCrCpCC,EAAS,wEAAU,CAAEpD,GAAI,OAAbA,EAAH,EAAGA,GAAH,yBAAwCA,ICDjDqD,EAAoB,SAAAC,GAC7B,IAAMC,EAAWC,cAEjB,OADqB,IAAIC,gBAAgBF,EAASG,QAC9BC,IAAIL,IC2CbM,GAtCE,WACZ,IAAMC,EAAQR,ECXJ,UDYL5E,EAAQqF,aAAY,SAAAnE,GAAK,ON+DD,SAACA,EAAOkE,GACtC,IAAMpF,EAAQoC,EAAYlB,GAE1B,OAAKkE,GAA0B,KAAjBA,EAAMhC,OAGbpD,EAAMsF,QAAO,qBAAGjC,QAAsBkC,cAAcC,SAASJ,EAAMhC,OAAOmC,kBAFtEvF,EMnEwByF,CAAmBvE,EAAOkE,MACvDzE,EAAW0E,YAAYhD,GAEvBS,EAAWC,cAEjB,OACI,kBAACgB,EAAD,KACK/D,EAAM0F,KAAI,SAAA5E,GAAI,OACX,kBAACmD,EAAD,CACIY,IAAK/D,EAAKS,GACV4C,OAAQrD,EAAKU,MAAQb,GAErB,kBAAC,EAAD,CACI4D,YAAU,EACVoB,QAAS,kBAAM7C,EAAS3B,EAAeL,EAAKS,OAE3CT,EAAKU,KAAO,SAAM,IAEvB,kBAAC6C,EAAD,CAAS7C,KAAMV,EAAKU,MAChB,kBAAC,IAAD,CAAMoE,GAAIjB,EAAO,CAAEpD,GAAIT,EAAKS,MACvBT,EAAKuC,UAGd,kBAAC,EAAD,CACAoB,QAAM,EACNkB,QAAS,kBAAM7C,EAASpB,EAAWZ,EAAKS,OAFxC,sB,mHEjCb,IAAMsE,GAAUtG,IAAOuG,IAAV,M,2aCALvG,WAAOK,OAAtB,MAES,qBAAGT,MAAkBC,MAAMS,QAKhB,qBAAGV,MAAkBM,WAAWC,aAcnC,qBAAGP,MAAkBC,MAAM2G,UCyB7BC,GAnCC,WACZ,IAAMrF,EAAW0E,YAAYhD,GACvBrC,EAAQqF,YAAYjD,GACpBU,EAAWC,cAEjB,OACI,kBAAC8C,GAAD,KACI,kBAAC,GAAD,CAAQF,QAAS,kBAAM7C,EAASjB,OAAhC,oCAGC7B,EAAMiG,OAAS,GACZ,oCAEI,kBAAC,GAAD,CAAQN,QAAS,kBAAM7C,EAAS7B,OAC3BN,EAAW,aAAU,QAD1B,mBAGA,kBAAC,GAAD,CACIgF,QAAS,kBAAM7C,EAASrB,MACxByE,SAAUlG,EAAMmG,OAAM,qBAAG3E,SAF7B,yBAMA,kBAAC,GAAD,CACImE,QAAS,kBAAM7C,EAASlB,MACxBwE,WAAS,GAFb,yB,4rBCjCb,IAAMP,GAAUtG,IAAO8G,QAAV,MAEF,qBAAGlH,MAAkBC,MAAMU,SACnB,qBAAGX,MAAkBC,MAAMmD,QAGxC+D,GAAS/G,IAAOgH,OAAV,MACa,qBAAGpH,MAAkBC,MAAMmD,QAQnC,qBAAGpD,MAAkBM,WAAWC,aAK3C8G,GAAQjH,IAAOkH,GAAV,MAKLC,GAAOnH,IAAOuG,IAAV,MCTFa,GAfC,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,KAAMC,EAAf,EAAeA,mBAAf,OACZ,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAACN,GAAD,KAAQI,GACPE,GAGL,kBAACJ,GAAD,KACIG,KCHGP,GANA,SAAC,GAAD,IAAGM,EAAH,EAAGA,MAAH,OACX,gCACA,4BAAKA,K,2ICFF,IAAMf,GAAUtG,IAAOuG,IAAV,MCQLiB,GANG,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACd,kBAAC,GAAD,KACKA,I,8HCHF,IAAMnB,GAAUtG,IAAOuG,IAAV,MCGL,cACZ,IAAMV,EAAQR,EVPF,UUQNqC,EZA+B,WACpC,IAAMnC,EAAWC,cACXmC,EAAUC,cAEhB,OAAO,YAAqB,IAAlBtC,EAAiB,EAAjBA,IAAKlB,EAAY,EAAZA,MACLyD,EAAe,IAAIpC,gBAAgBF,EAASG,aAEpCoC,IAAV1D,EACAyD,EAAaE,OAAOzC,GAEpBuC,EAAaG,IAAI1C,EAAKlB,GAG1B,IAAM6D,EAAYJ,EAAaK,WAC/BP,EAAQlG,KAAR,UAAgB8D,EAAS4C,SAAzB,YAAqCF,KYdZG,GAS7B,OACI,kBAAC,GAAD,KACI,kBAAClE,EAAD,CACIG,YAAY,kBACZD,MAAOyB,GAAS,GAChBvB,SAZS,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBmD,EAAsB,CAClBpC,IVZI,SUaJlB,MAA+B,KAAxBG,EAAOH,MAAMP,OAAgBU,EAAOH,WAAQ0D,SC4B/CO,OA5Bf,WAEE,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,CAAQhB,MAAM,qBACd,kBAAC,GAAD,CACEA,MAAM,qBACNC,KAAM,kBAAC,EAAD,QAEb,kBAAC,GAAD,CACOD,MAAM,eACNC,KAAM,kBAACgB,GAAD,QAER,kBAAC,GAAD,CACEjB,MAAM,mBACNC,KACE,kBAAC,GAAD,MAGFC,mBACE,kBAAC,GAAD,UCDKgB,OArBf,WAAqB,IACXvG,EAAOwG,cAAPxG,GACFT,EAAOuE,aAAY,SAAAnE,GAAK,OnB2DL,SAACA,EAAOE,GAAR,OACvBgB,EAAYlB,GAAO8G,MAAK,qBAAGzG,KAAgBH,KmB5DX6G,CAAY/G,EAAOK,MAErD,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,CAAQqF,MAAM,8BACd,kBAAC,GAAD,CACEA,MAAO9F,EAAOA,EAAKuC,QAAU,0BAC7BwD,OAAQ/F,GACN,oCACE,mDADF,IAC+BA,EAAKU,KAAO,MAAQ,WCjB9C,qBACX,kBAAC,GAAD,KACE,kBAAC,GAAD,CAAQoF,MAAM,cACd,kBAAC,GAAD,CACEA,MAAM,wBACNC,KAAM,mE,2cCPd,IAEaqB,GAAgB3I,YAAO4I,KAASC,OAAM,iBAAO,CACtDC,gBAHoB,iBAEK9I,CAAH,MAGjB,qBAAGJ,MAAkBC,MAAMU,QALZ,eAiBXiE,GAAOxE,IAAOyE,GAAV,MACH,qBAAG7E,MAAkBC,MAAMS,QAQ5BoE,GAAO1E,IAAO2E,GAAV,MCzBF,cACX,OACI,6BACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAACgE,GAAD,CAAetC,GlBTN,YkBST,YAEJ,kBAAC,GAAD,KACI,kBAACsC,GAAD,CAAetC,GlBXL,UkBWV,iBCJL,qBACX,kBAAC,IAAD,KACI,kBAAC0C,GAAD,MAEI,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,KAAM5D,KACL,kBAAC,GAAD,OAEJ,kBAAC,IAAD,CAAO4D,KnBhBM,YmBiBT,kBAAC,GAAD,OAEJ,kBAAC,IAAD,CAAOA,KnBlBO,UmBmBV,kBAAC,GAAD,OAEJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAU3C,GnBvBD,iBoBYT4C,QACW,cAA7BC,OAAO3D,SAAS4D,UAEe,UAA7BD,OAAO3D,SAAS4D,UAEhBD,OAAO3D,SAAS4D,SAASC,MACvB,2DClBC,I,+CCAMC,GAAe,yCAAG,6BAAAC,EAAA,sEACJC,MAAM,sCADF,cACrBC,EADqB,QAGbC,IACV,IAAIC,MAAMF,EAASG,YAJI,SAOdH,EAASI,OAPK,mFAAH,qD,aCMlBC,I,aAWAC,I,aAKOC,IAhBjB,SAAUF,KAAV,wEAEQ,OAFR,kBAEcG,aAAM,KAFpB,OAG6B,OAH7B,SAGmCC,aAAKZ,IAHxC,OAIQ,OADMa,EAHd,gBAIcC,aAAI3H,EAAyB0H,IAJ3C,+BAMQ,OANR,oCAMcC,aAAI1H,KANlB,QAOQ,OAPR,UAOcwH,aAAKG,MAAO,iCAP1B,uDAWA,SAAUN,KAAV,wEACkB,OADlB,SACwBO,aAAOxH,GAD/B,OAEI,OADMpC,EADV,gBAEUwJ,aAAKzJ,EAAyBC,GAFxC,wCAKO,SAAUsJ,KAAV,kEAEH,OADAO,QAAQC,IAAI,kCADT,SAEGC,aAAWlI,EAAkBmI,KAAMZ,IAFtC,OAGH,OAHG,SAGGa,aAAU,IAAKZ,IAHlB,wC,iBClBkBa,IAAV,SAAUA,KAAV,kEACX,OADW,SACLC,aAAI,CACNb,OAFO,wCCCf,IAAMc,GAAiBC,eAEjBC,GAASC,YAAe,CAC1BC,QAAS,CACLxK,MAAOyK,GAEXC,WAAY,CAACN,MAGjBA,GAAeO,IAAIT,IAEJI,UCNfM,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUR,MAAOA,IACf,kBAAC,IAAD,CAAenL,MLbA,CACjBC,MAAO,CACH2L,MAAO,OACPhF,OAAQ,OACRxD,KAAM,OACNlD,QAAS,OACTS,MAAO,OACPD,KAAM,UACN6E,QAAS,UACTF,YAAa,WAEjB/E,WAAY,CACRC,UAAW,OKEX,kBAACT,EAAD,MACA,kBAAC+L,GAAD,SAINC,SAASC,eAAe,SNgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.3464a1fb.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle `\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        font-family: 'Montserrat', sans-serif;\r\n        background: ${({ theme }) => theme.color.gallery};\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form `\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n\r\n`;\r\n\r\n\r\n\r\nexport const Button = styled.button `\r\n    padding: 10px;\r\n    background: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        removeAllTasks: (state) => {\r\n            state.tasks = [];\r\n        },\r\n        fetchExampleTasks: state => { \r\n            state.loading = true;\r\n        },\r\n\r\n        fetchExampleTasksSuccess: (state, { payload: tasks}) => {\r\n            state.tasks = tasks;\r\n            state.loading = false;\r\n        },\r\n\r\n        fetchExampleTasksError: (state) => {\r\n            state.loading = false;\r\n        },\r\n\r\n        setTasks: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n        },\r\n    },\r\n\r\n\r\n});\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    setAllDone,\r\n    removeTask,\r\n    removeAllTasks,\r\n    fetchExampleTasks,\r\n    setTasks,\r\n    fetchExampleTasksSuccess,\r\n    fetchExampleTasksError,\r\n} = tasksSlice.actions;\r\n\r\n\r\n const selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectLoading = state => selectTasksState(state).loading;\r\n\r\nexport const getTaskById = (state, taskId) =>\r\n    selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) =>{\r\n    const tasks = selectTasks(state);\r\n\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks;\r\n    }\r\n    return tasks.filter(({ content }) => content.toUpperCase().includes(query.trim().toUpperCase()));\r\n}\r\n\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport default styled.input `\r\n    padding: 10px;\r\n    border: 1px solid ${({ theme }) => theme.color.alto};\r\n`;","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { Button,  StyledForm } from \"./styled\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport Input from \"../../Input\";\r\n\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n    if (!trimmedNewTaskContent ) {\r\n      return;\r\n    }\r\n\r\n    dispatch(addTask({\r\n      content: trimmedNewTaskContent,\r\n      done: false,\r\n      id: nanoid(),\r\n    }));\r\n    \r\n    setNewTaskContent(\"\");\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input\r\n        ref={inputRef}\r\n        value={newTaskContent}\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n      />\r\n      <Button>Dodaj zadanie</Button>\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul `\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li `\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alto};\r\n\r\n    ${({ hidden }) => hidden && css `\r\n        display:none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span `\r\n    ${({ done }) => done && css `\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button `\r\n    border: none;\r\n    color: ${({ theme }) => theme.color.white};\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n    transition: filter 0.3s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css `\r\n        background: ${({ theme }) => theme.color.forestGreen};\r\n    `}\r\n\r\n    ${({ remove }) => remove && css `\r\n        background: ${({ theme }) => theme.color.crimson};\r\n    `}\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","export const toTasks = () => \"/zadania\";\r\nexport const toAuthor = () => \"/autor\";\r\n\r\nexport const toTask = ({ id } = { id: \":id\" }) => `/zadania/${id}`;\r\n","import { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nexport const useQueryParameter = key => {\r\n    const location = useLocation();\r\n    const searchParams = new URLSearchParams(location.search);\r\n    return searchParams.get(key);\r\n}\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    return ({ key, value }) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if (value === undefined ) {\r\n            searchParams.delete(key);\r\n        } else {\r\n            searchParams.set(key, value);\r\n        }\r\n\r\n        const newSearch = searchParams.toString();\r\n        history.push(`${location.pathname}?${newSearch}`);\r\n    }\r\n}","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { List, Item, Content, Button } from \"./styled\";\r\nimport { toggleTaskDone, removeTask, selectTasksByQuery, selectHideDone } from \"../../tasksSlice\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { toTask } from \"../../../../routes\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { useQueryParameter} from \"../queryParameters\";\r\n\r\n\r\nconst TaskList = () => {\r\n     const query = useQueryParameter(searchQueryParamName);\r\n    const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n    const hideDone = useSelector(selectHideDone);\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}   \r\n                >\r\n                    <Button \r\n                        toggleDone\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"√\" : \"\"}\r\n                    </Button>\r\n                    <Content done={task.done}>\r\n                        <Link to={toTask({ id: task.id })}>\r\n                            {task.content}</Link>\r\n                    </Content>\r\n                    \r\n                    <Button \r\n                    remove\r\n                    onClick={() => dispatch(removeTask(task.id))}\r\n                    >\r\n                    🗑\r\n            </Button>\r\n                </Item>\r\n    ))\r\n}\r\n        </List >\r\n    );\r\n    \r\n};\r\nexport default TaskList;","export default \"szukaj\";","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport default styled.button`\r\nbackground: transparent;\r\ncolor: ${({ theme }) => theme.color.teal};\r\nborder: none;\r\nmargin: 0 0 0 20x;\r\ntransition: filter 0.3s;\r\n\r\n@media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.silver};\r\n    }\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Wrapper } from \"./styled\";\r\nimport Button from \"../Button\";\r\nimport {\r\n    selectTasks,\r\n    toggleHideDone,\r\n    setAllDone,\r\n    removeAllTasks,\r\n    fetchExampleTasks, selectHideDone\r\n} from \"../../tasksSlice\";\r\n\r\n\r\nconst Buttons = () => {\r\n    const hideDone = useSelector(selectHideDone);\r\n    const tasks = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Button onClick={() => dispatch(fetchExampleTasks())}>\r\n                Pobierz przykładowe zadania\r\n        </Button>\r\n            {tasks.length > 0 && (\r\n                <>\r\n\r\n                    <Button onClick={() => dispatch(toggleHideDone())} >\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n            </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        disabled={tasks.every(({ done }) => done)}\r\n                    >\r\n                        Ukończ wszystkie\r\n            </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(removeAllTasks())}\r\n                        removeAll>\r\n                        Usuń wszystko\r\n\r\n            </Button>\r\n                </>\r\n            )}\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section `\r\n    margin: 10px 0;\r\n    background: ${({ theme }) => theme.color.white};\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.color.alto};\r\n`;\r\n\r\nexport const Header = styled.header `\r\n     border-bottom: 1px solid ${({ theme }) => theme.color.alto};\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2 `\r\n    font-size: 20px;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Body = styled.div `\r\n    padding: 20px;\r\n`;","import React from \"react\";\r\nimport { Wrapper, Body, Header, Title } from \"./styled\";\r\n\r\nconst Section = ({title, body, extraHeaderContent}) => (\r\n    <Wrapper>\r\n        <Header>\r\n            <Title>{title}</Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n\r\n        <Body>\r\n           {body}\r\n\r\n        </Body>\r\n\r\n    </Wrapper>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n    <header>\r\n    <h1>{title}</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n\r\n`;","import React from \"react\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\n\r\nconst Container = ({children}) => (\r\n    <Wrapper>\r\n        {children}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\n\r\nexport const Wrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n`;","import React from \"react\";\r\nimport Input from \"../../Input\";\r\nimport { useQueryParameter, useReplaceQueryParameter } from \"../queryParameters\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nexport default () => {\r\n   const query = useQueryParameter(searchQueryParamName);\r\n   const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n   const onInputChange = ({ target }) => {\r\n       replaceQueryParameter({\r\n           key: searchQueryParamName,\r\n           value: target.value.trim() !== \"\" ? target.value : undefined,\r\n       });\r\n   };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Input\r\n                placeholder=\"Filtruj zadania\"\r\n                value={query || \"\"}\r\n                onChange={onInputChange}\r\n            />\r\n        </Wrapper>\r\n    );\r\n\r\n};","import React from 'react';\nimport Form from \"../TasksPage/Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../../common/Section\";\nimport Header from \"../../../common/Header\";\nimport Container from \"../../../common/Container\";\nimport Search from \"./Search\";\n\n\n\n\n\nfunction TasksPage() {\n\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n      />\n <Section\n        title=\"Wyszukiwarka\"\n        body={<Search/>}\n      />\n      <Section\n        title=\"Lista zadań\"\n        body={\n          <TaskList/>\n        }\n        \n        extraHeaderContent={\n          <Buttons/>\n        }\n      />\n\n    </Container>\n  )\n};\n\nexport default TasksPage;\n","import React from 'react';\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { getTaskById } from '../tasksSlice';\r\n\r\n\r\n\r\n\r\nfunction TaskPage() {\r\n  const { id } = useParams();\r\n  const task = useSelector(state => getTaskById(state, id));\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Szczegóły zadania\" />\r\n      <Section\r\n        title={task ? task.content : \"Nie znaleziono zadania \"}\r\n        body={!!task && (\r\n          <>\r\n            <strong>Ukończono:</strong> {task.done ? \"Tak\" : \"Nie\"}\r\n          </>\r\n        )}\r\n      />\r\n\r\n\r\n    </Container>\r\n  )\r\n};\r\n\r\nexport default TaskPage;\r\n","import React from \"react\";\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\nimport Container from \"../../common/Container\";\r\n\r\nexport default () => (\r\n    <Container>\r\n      <Header title=\"O autorze\" />\r\n      <Section\r\n        title=\"Amanda Chawińska\"\r\n        body={<> coś tam o mnie.. </>}\r\n      />\r\n\r\n    </Container>\r\n)","import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst activeClassName = \"link-active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\ncolor: ${({ theme }) => theme.color.white};\r\ntext-decoration: none;\r\n\r\n&.${activeClassName}{\r\n    font-weight: bold;\r\n}\r\n\r\n&:hover {\r\n    border-bottom: 1px solid;\r\n}\r\n`;\r\n\r\nexport const List = styled.ul `\r\nbackground: ${({ theme }) => theme.color.teal};\r\nmargin: 0;\r\npadding: 0;\r\ndisplay: flex;\r\njustify-content: center;\r\nlist-style: none;\r\n`;\r\n\r\nexport const Item = styled.li`\r\nmargin: 20px;\r\n`;","import React from \"react\";\r\nimport { toAuthor, toTasks } from \"../routes\";\r\nimport { List, Item, StyledNavLink } from \"./styled\";\r\n\r\nexport default () => {\r\n    return (\r\n        <nav>\r\n            <List>\r\n                <Item>\r\n                    <StyledNavLink to={toTasks()}>Zadania</StyledNavLink>\r\n                </Item>\r\n                <Item>\r\n                    <StyledNavLink to={toAuthor()}>O autorze</StyledNavLink>\r\n                </Item>\r\n            </List>\r\n        </nav>\r\n    );\r\n};","import React from \"react\";\r\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport Tasks from \"./features/tasks/TasksPage\";\r\nimport Task from \"./features/tasks/TaskPage\";\r\nimport Author from \"./features/author/AuthorPage\";\r\nimport { toAuthor, toTask, toTasks } from \"./routes\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nexport default () => (\r\n    <HashRouter>\r\n        <Navigation />\r\n\r\n            <Switch>\r\n            <Route path={toTask()}>\r\n                    <Task />\r\n                </Route>\r\n                <Route path={toTasks()}>\r\n                    <Tasks />\r\n                </Route>\r\n                <Route path={toAuthor()}>\r\n                    <Author />\r\n                </Route>\r\n                <Route>\r\n                    <Redirect to={toTasks()}/>\r\n                </Route>\r\n            </Switch>\r\n        \r\n    </HashRouter>\r\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const theme = {\r\n    color: {\r\n        black: \"#000\",\r\n        silver: \"#ccc\",\r\n        alto: \"#ddd\",\r\n        gallery: \"#eee\",\r\n        white: \"#fff\",\r\n        teal: \"#008080\",\r\n        crimson: \"#db143c\",\r\n        forestGreen: \"#228c22\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n};","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/List-task-react/exampleTasks.json\");\r\n\r\n    if (!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { takeLatest, call, put, delay, select, takeEvery } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\nimport { fetchExampleTasks, selectTasks,  fetchExampleTasksSuccess, fetchExampleTasksError } from \"./tasksSlice\";\r\n\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(fetchExampleTasksSuccess(exampleTasks));\r\n    } catch (error) {\r\n        yield put(fetchExampleTasksError());\r\n        yield call(alert, \"Coś poszło nie tak!\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    console.log(\"Saga jest podłączona\");\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n}","import { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store =  configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}